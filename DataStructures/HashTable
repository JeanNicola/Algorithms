var called = 0;
var doHash = (string) => {
  called++;
  var hash = 0;
  for (var i = 0; i < string.length; i++) { hash += string.charCodeAt(i); }
  return hash;
};
var HashTable = function(capacity = 100) {
  this.collection = {};
  this.capacity = capacity;
  // change code below this line
  
  this.size = function() {
    return Object.keys(this.collection).length;
  }
  
  this.calculateHash = function(key) { // key is an string
    
    var hash = doHash(key) % this.capacity;
    
    while(this.collection[hash] && this.collection[hash].key !== key) {
      hash = (hash + 1) % this.capacity;
    }
    
    return hash;
  }
  
  this.lookup = function(key) {
    
    var hash = this.calculateHash(key);
    if (!this.collection[hash] || this.collection[hash].key !== key) {
      return null;
    }
    
    return this.collection[hash].value;
  }
  
  this.add = function(key, value) {

    if (this.capacity === this.size()) return null; // The collection is full
    
    var hash = this.calculateHash(key);
    var entry = {
      key: key,
      value: value
    }
    
    if (!this.collection[hash] || this.collection[hash].key === key) {
      this.collection[hash] = entry;
      return entry.value;
    }
    
    return null;
  }
  
  this.remove = function(key) {
    
    if (this.size() === 0) return null; // The collection is empty
    
    var value = this.lookup(key);
    
    if (value) {
      var hash = this.calculateHash(key);
      delete this.collection[hash];
      
      hash = (hash + 1) % capacity;
      
      while (this.collection[hash] !== null) {
        var entry = this.collection[hash];
        delete this.collection[hash];
        this.add(entry.key, entry.value);
        hash = (hash + 1) % capacity;
      }
      
    }
    
    return value;
    
  }
  // change code above this line
};

var myMap = new HashTable(5);

myMap.add('primero', 1);
myMap.add('segundo', 2);
myMap.add('tercero', 3);
myMap.add('cuarto', 4);
myMap.add('quinto', 5);

console.log(myMap.lookup('segundo'))
