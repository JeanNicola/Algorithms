class CircularQueue {
   constructor(size) {

     this.queue = [];
     this.read = -1;
     this.write = -1;
     this.max = size - 1;

     while (size > 0) {
        this.queue.push(null);
        size--;
     }

   }

   print() {
     return this.queue;
   }


   enqueue(item) {
    // Only change code below this line
    if (this.read === 0 && this.write === this.max || 
        this.write === (this.read - 1)) {
      
      return "Queue is full. !";
      
    } else if (this.read === -1) { // It's the first item
      this.read = this.write = 0;
      this.queue[this.write] = item;
    } else if (this.write === this.max && this.read !== 0) {
      this.write = 0;
      this.queue[this.write] = item;
    } else {
      this.write++;
      this.queue[this.write] = item;
    }
     
    return item;
    // Only change code above this line
   }

   dequeue() {
    // Only change code below this line
    if (this.read === -1) {
      return "The queue is empty"
    }
     
    var data = this.queue[this.read];
    this.queue[this.read] = null;
    if (this.read === this.write) {
      this.read = this.write = -1;
    } else if (this.read === this.max) {
      this.read = 0;
    } else {
      this.read++
    }
    return data;
    // Only change code above this line
   }
  
}
